#!/usr/bin/env python

import os
import unittest

import click
import numpy as np
from skbio import DistanceMatrix

from mdsa.algorithm import Algorithm
from mdsa.algorithms.eigh import Eigh
from mdsa.algorithms.eigsh import Eigsh
from mdsa.algorithms.fsvd import FSVD
from mdsa.algorithms.nystrom import Nystrom
from mdsa.algorithms.scmds import Scmds
from mdsa.algorithms.ssvd import SSVD

from mdsa.algorithms.svd import SVD
from mdsa.pcoa import pcoa

# Register algorithms here so they can be called
# from the command line
Algorithm.register(Nystrom())
Algorithm.register(Scmds())
Algorithm.register(SVD())
Algorithm.register(SSVD())
Algorithm.register(FSVD())
Algorithm.register(Eigsh())
Algorithm.register(Eigh())


@click.group()
def main():
    """
    Multidimensional scaling approximations. For command line options,
    re-run with --help flag.
    """
    pass


@main.command()
@click.option('--verbosity',
              type=click.Choice(['quiet', 'default', 'verbose']),
              default='verbose',
              help='Python unittest package: level of detail to display in '
                   'output')
@click.option('--directory', type=click.Path(), default='.',
              help='Relative path of directory containing tests')
def test(verbosity, directory):
    click.echo(
        'Running tests via unittest from directory (output verbosity level: '
        '%s): %s' % (verbosity, directory))
    verbosity_codes = dict(quiet=0, default=1, verbose=2)

    # Run all tests
    testsuite = unittest.TestLoader().discover(directory)
    unittest.TextTestRunner(verbosity=verbosity_codes[verbosity]). \
        run(testsuite)


@main.command()
# inputfile = Path to input .txt file containing a numpy-readable distance
# matrix
@click.argument('inputfile', type=click.File('r'))
@click.option('--outpath', type=click.Path(file_okay=True),
              help='File where we should output to.')
@click.option('--algorithm', type=str,
              help='Algorithm to run. '
                   'Algorithms: %s' % (', '.join(Algorithm.algorithms.keys())))
@click.option('--dimensions', type=int, default=10,
              help='Number of dimensions to reduce distance matrix to.'
                   'Ensure this parameter is less tahn the dimensionality of '
                   'the'
                   ' input distance matrix)')
def run(inputfile, outpath, algorithm, dimensions):
    """
    Run a Principle Coordinate Analysis (PCoA) the given algorithm(s) on a
    distance matrix.
    The distance matrix is loaded from INPUTFILE which must have extension
    .txt and be formatted as a
    scikit bio labeled square matrix file format (lsmat).
    """
    click.echo('Running %s on given matrix (from `%s` and outputting '
               'to `%s`)\n' % (algorithm, inputfile.name, outpath))

    input_matrix = DistanceMatrix.read(inputfile.name, format='lsmat')

    # Run algorithm
    click.echo(
        '> Running algorithm %s on distance matrix from input file: %s' %
        (algorithm, inputfile.name))
    try:
        algorithm = Algorithm.get_algorithm(algorithm)
    except KeyError:
        click.echo('Algorithm "%s" does not exist. '
                   'Ensure it is registered in scripts/mdsa through '
                   'Algorithm.register() and exists in ./mdsa/algorithms, '
                   'subclassing Algorithm properly.'
                   % algorithm, err=True)
        return

    # Run PCoA
    ordination_results = pcoa(input_matrix, algorithm, dimensions)

    click.echo('> PCoA completed.')

    # Output results to file
    if not os.path.exists(os.path.dirname(outpath)):
        os.makedirs(os.path.dirname(outpath))

    click.echo('> Outputting results to file: %s\n' % outpath)
    ordination_results.write(outpath)


def format_pcoa_output(eigenvectors, eigenvalues, percentages):
    eigenvectors = np.array(eigenvectors)
    eigenvalues = np.array(eigenvalues)
    percentages = np.array(percentages)
    str_out = ''

    # Output eigenvalues
    if len(eigenvalues) > 0 and not np.all(np.isnan(eigenvalues)):
        str_out += 'Eigenvalues\t(%d total)\n\n' % len(eigenvalues)
        for eigval in eigenvalues:
            str_out += str(eigval)
            str_out += '\n'
    else:
        str_out += 'No eigenvalues output by algorithm.'
    str_out += '\n\n'

    # Output proportion explained percentages
    if len(percentages) > 0 and not np.all(np.isnan(percentages)):
        str_out += 'Proportion explained as percentages \t(%d total)\n\n' % \
                   len(
                       percentages)
        for percentage in eigenvalues:
            str_out += str(percentage)
            str_out += '%\n'
    else:
        str_out += 'No percentages output by algorithm.'

    str_out += '\n\n'

    # Output eigenvectors
    str_out += 'Eigenvectors (matrix shape: %s)\n' % repr(eigenvectors.shape)

    str_out += repr(eigenvectors)
    str_out += '\n'

    return str_out


if __name__ == '__main__':
    main()
